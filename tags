!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
HLIST_HEAD	list.h	563;"	d
HLIST_HEAD_INIT	list.h	562;"	d
INIT_HLIST_HEAD	list.h	564;"	d
INIT_HLIST_NODE	list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f	signature:(struct hlist_node *h)
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f	signature:(struct list_head *list)
LIST_HEAD	list.h	17;"	d
LIST_HEAD_INIT	list.h	15;"	d
MAX	common.h	19;"	d
MIN	common.h	21;"	d
NULL	common.h	13;"	d
NULL	common.h	15;"	d
SWAP	common.h	4;"	d
_LINUX_LIST_H	list.h	2;"	d
__COMMON_H__	common.h	2;"	d
__anon1::data	demo.c	/^    int data;$/;"	m	struct:__anon1	file:	access:public
__anon1::list	demo.c	/^    struct list_head list;$/;"	m	struct:__anon1	typeref:struct:__anon1::list_head	file:	access:public
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f	signature:(struct hlist_node *n)
__list_add	list.h	/^extern void __list_add(struct list_head *new,$/;"	p	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_cut_position	list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head, struct list_head *entry)
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f	signature:(struct list_head * prev, struct list_head * next)
__list_del_entry	list.h	/^extern void __list_del_entry(struct list_head *entry);$/;"	p	signature:(struct list_head *entry)
__list_del_entry	list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
__list_for_each	list.h	375;"	d
__list_splice	list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, struct list_head *prev, struct list_head *next)
container_of	common.h	25;"	d
data	demo.c	/^    int data;$/;"	m	struct:__anon1	file:	access:public
data_queue_t	demo.c	/^}data_queue_t;$/;"	t	typeref:struct:__anon1	file:
first	common.h	/^        struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node	access:public
generate_data	demo.c	/^static data_queue_t *generate_data()$/;"	f	file:
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f	signature:(struct hlist_node *n, struct hlist_node *next)
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f	signature:(struct hlist_node *n, struct hlist_node *next)
hlist_add_fake	list.h	/^static inline void hlist_add_fake(struct hlist_node *n)$/;"	f	signature:(struct hlist_node *n)
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f	signature:(struct hlist_node *n, struct hlist_head *h)
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f	signature:(struct hlist_node *n)
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f	signature:(struct hlist_node *n)
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f	signature:(const struct hlist_head *h)
hlist_entry	list.h	655;"	d
hlist_for_each	list.h	657;"	d
hlist_for_each_entry	list.h	671;"	d
hlist_for_each_entry_continue	list.h	683;"	d
hlist_for_each_entry_from	list.h	695;"	d
hlist_for_each_entry_safe	list.h	708;"	d
hlist_for_each_safe	list.h	660;"	d
hlist_head	common.h	/^struct hlist_head {$/;"	s
hlist_head::first	common.h	/^        struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node	access:public
hlist_move_list	list.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f	signature:(struct hlist_head *old, struct hlist_head *new)
hlist_node	common.h	/^struct hlist_node {$/;"	s
hlist_node::next	common.h	/^        struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node	access:public
hlist_node::pprev	common.h	/^        struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::	access:public
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f	signature:(const struct hlist_node *h)
list	demo.c	/^    struct list_head list;$/;"	m	struct:__anon1	typeref:struct:__anon1::list_head	file:	access:public
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_cut_position	list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head, struct list_head *entry)
list_del	list.h	/^extern void list_del(struct list_head *entry);$/;"	p	signature:(struct list_head *entry)
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_entry	list.h	345;"	d
list_first_entry	list.h	356;"	d
list_for_each	list.h	364;"	d
list_for_each_entry	list.h	413;"	d
list_for_each_entry_continue	list.h	449;"	d
list_for_each_entry_continue_reverse	list.h	463;"	d
list_for_each_entry_from	list.h	476;"	d
list_for_each_entry_reverse	list.h	424;"	d
list_for_each_entry_safe	list.h	487;"	d
list_for_each_entry_safe_continue	list.h	503;"	d
list_for_each_entry_safe_from	list.h	519;"	d
list_for_each_entry_safe_reverse	list.h	534;"	d
list_for_each_prev	list.h	383;"	d
list_for_each_prev_safe	list.h	402;"	d
list_for_each_safe	list.h	392;"	d
list_head	common.h	/^struct list_head {$/;"	s
list_head::next	common.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	common.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, const struct list_head *head)
list_is_singular	list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f	signature:(const struct list_head *head)
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_prepare_entry	list.h	437;"	d
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f	signature:(struct list_head *old, struct list_head *new)
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f	signature:(struct list_head *old, struct list_head *new)
list_rotate_left	list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f	signature:(struct list_head *head)
list_safe_reset_next	list.h	552;"	d
list_splice	list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f	signature:(const struct list_head *list, struct list_head *head)
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_tail	list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_tail_init	list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
main	demo.c	/^int main()$/;"	f
next	common.h	/^        struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node	access:public
next	common.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
offsetof	common.h	23;"	d
pprev	common.h	/^        struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::	access:public
prev	common.h	/^        struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
